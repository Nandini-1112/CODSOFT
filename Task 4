#include <iostream>
#include <vector>
using namespace std;

struct Task {
    string desc;
    bool done;
};

vector<Task> tasks;

void addTask() {
    Task newTask;
    cout << "Enter task: ";
    cin.ignore();
    getline(cin, newTask.desc);
    newTask.done = false;
    tasks.push_back(newTask);
    cout << "Task added successfully.\n";
}

void viewTasks() {
    if (tasks.empty()) {
        cout << "No tasks available.\n";
        return;
    }
    for (size_t i = 0; i < tasks.size(); ++i) {
        cout << i + 1 << ". " << tasks[i].desc << " [" 
             << (tasks[i].done ? "Done" : "Pending") << "]\n";
    }
}

void markTaskDone() {
    if (tasks.empty()) {
        cout << "No tasks to mark as done.\n";
        return;
    }
    viewTasks();
    int i;
    cout << "Enter task number to mark as done: ";
    cin >> i;

    if (cin.fail() || i < 1 || i > tasks.size()) {
        cin.clear();
        cin.ignore(1000, '\n');
        cout << "Invalid input! Please enter a valid task number.\n";
    } else if (tasks[i - 1].done) {
        cout << "Task already marked as done.\n";
    } else {
        tasks[i - 1].done = true;
        cout << "Task marked as done.\n";
    }
}

void removeTask() {
    if (tasks.empty()) {
        cout << "No tasks to remove.\n";
        return;
    }
    viewTasks();
    int i;
    cout << "Enter task number to remove: ";
    cin >> i;

    if (cin.fail() || i < 1 || i > tasks.size()) {
        cin.clear();
        cin.ignore(1000, '\n');
        cout << "Invalid input! Please enter a valid task number.\n";
    } else {
        tasks.erase(tasks.begin() + i - 1);
        cout << "Task removed successfully.\n";
    }
}

int main() {
    int choice;
    while (true) {
        cout << "\n1. Add Task\n2. View Tasks\n3. Mark Task Done\n4. Remove Task\n5. Exit\n";
        cout << "Choose an option: ";
        cin >> choice;

        switch (choice) {
            case 1:
                addTask();
                break;
            case 2:
                viewTasks();
                break;
            case 3:
                markTaskDone();
                break;
            case 4:
                removeTask();
                break;
            case 5:
                cout << "Exiting program. Goodbye!\n";
                return 0;
            default:
                cout << "Invalid option! Please try again.\n";
                break;
        }
    }
}
